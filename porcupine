#!/usr/bin/env python3

import argparse, sys, os, json, subprocess
from PyQt5 import QtWidgets

import gi
gi.require_version('Notify', '0.7')
from gi.repository import Notify

def notify(msg, title="Pocupine"):
    Notify.init("Porcupine")
    Hello=Notify.Notification.new(title, msg, "dialog-information")
    Hello.show()

class Settings(object):
    def __init__(self):
        self.path = os.path.expanduser("~/.config/porcupine.json")

    def load(self):
        use_default = False
        if os.path.exists(self.path):
            try:
                settings = json.load(open(self.path, 'r'))
            except:
                use_default = True
        else:
            use_default = True

        if use_default:
            settings = {
                'action': 'clipboard',
                'cmd': ''
            }

        return settings

    def save(self, action, cmd):
        settings = {
            'action': action,
            'cmd': cmd
        }
        json.dump(settings, open(self.path, 'w'))

class PorcupineSettingsWindow(QtWidgets.QMainWindow):
    def __init__(self, app, settings):
        super(PorcupineSettingsWindow, self).__init__()
        self.app = app
        self.settings = settings
        self.setWindowTitle('Porcupine')

        # Load the settings
        s = self.settings.load()

        # Build the GUI
        label = QtWidgets.QLabel('What should Porcupine do with the URL?')
        self.radio_clipboard = QtWidgets.QRadioButton('Copy it to the clipboard')
        self.radio_clipboard.toggled.connect(self.toggle)
        self.radio_command = QtWidgets.QRadioButton('Run command with the URL')
        self.radio_command.toggled.connect(self.toggle)
        if s['action'] == 'clipboard':
            self.radio_clipboard.setChecked(True)
            self.radio_command.setChecked(False)
        else:
            self.radio_clipboard.setChecked(False)
            self.radio_command.setChecked(True)
        self.edit_command = QtWidgets.QLineEdit()
        self.edit_command.setPlaceholderText('for example: qvm-open-in-dvm %U')
        self.edit_command.setText(s['cmd'])
        button_save = QtWidgets.QPushButton("Save Settings")
        button_save.clicked.connect(self.save_settings)

        self.update_ui()

        # Set the layout
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(self.radio_clipboard)
        layout.addWidget(self.radio_command)
        layout.addWidget(self.edit_command)
        layout.addStretch()
        layout.addWidget(button_save)
        central_widget = QtWidgets.QWidget()
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)
        self.show()

    def toggle(self):
        self.update_ui()

    def update_ui(self):
        # Only update the UI if it has been built
        if hasattr(self, 'radio_clipboard') and hasattr(self, 'radio_command') and hasattr(self, 'edit_command'):
            if self.radio_clipboard.isChecked():
                self.edit_command.hide()
            if self.radio_command.isChecked():
                self.edit_command.show()

    def save_settings(self):
        if self.radio_clipboard.isChecked():
            action = 'clipboard'
        else:
            action = 'command'
        cmd = self.edit_command.text()

        self.settings.save(action, cmd)
        self.close()

def main():
    # Parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('url', metavar='url', nargs='?', help='URL to open')
    args = parser.parse_args()

    # Create the settings object
    settings = Settings()

    if args.url is None:
        # No arguments, open the settings dialog
        app = QtWidgets.QApplication(sys.argv)
        gui = PorcupineSettingsWindow(app, settings)
        sys.exit(app.exec_())

    else:
        # Validate it as a URL
        url = sys.argv[1]
        if not url.lower().startswith('http://') and not url.lower().startswith('https://'):
            notify("{} does not appear to be a URL".format(url))
            return

        # Load settings
        s = settings.load()

        if s['action'] == 'clipboard':
            # Copy to clipboard
            app = QtWidgets.QApplication(sys.argv)
            clipboard = app.clipboard()
            clipboard.setText(url)
            notify(url, title="Copied address to clipboard")
        else:
            # Launch subprocess
            cmd = s['cmd'].split()
            cmd = [url if x=='%U' else x for x in cmd]
            try:
                subprocess.call(cmd)
            except:
                notify("Error running command")

if __name__ == '__main__':
    main()
